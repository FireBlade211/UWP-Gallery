<Page
    x:Class="UWPGallery.ControlPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:UWPGallery"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"
    xmlns:controls="using:UWPGallery.Controls"
    xmlns:converters="using:CommunityToolkit.WinUI.Converters"
    xmlns:datamodel="using:UWPGallery.DataModel"
    xmlns:toolkit="using:CommunityToolkit.WinUI.Controls">

    <Page.Resources>
        <converters:StringVisibilityConverter
            x:Key="stringVisibilityConverter"
            EmptyValue="Collapsed"
            NotEmptyValue="Visible" />
        <converters:CollectionVisibilityConverter
            x:Name="collectionConverter"
            EmptyValue="Collapsed"
            NotEmptyValue="Visible" />
    </Page.Resources>
    <Grid x:Name="rootPanel">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <controls:PageHeader
            x:Name="pageHeader"
            Margin="36,24,36,0"
            Item="{x:Bind Item}" />

        <!--  Content Region  -->
        <ScrollViewer
            x:Name="svPanel"
            Grid.Row="1"
            VerticalScrollBarVisibility="Auto"
            VerticalScrollMode="Auto">
            <Grid x:Name="contentRoot" Padding="36,0,36,36">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TextBlock
                    x:Name="descriptionText"
                    Grid.ColumnSpan="2"
                    Margin="0,4,24,0"
                    Text="{x:Bind Item.Description}"
                    Visibility="{x:Bind Item.Description, Converter={StaticResource stringVisibilityConverter}}"
                    TextWrapping="WrapWholeWords"/>
                <Frame x:Name="contentFrame" Grid.Row="1" x:FieldModifier="public" />

                <TextBlock Margin="0,12,0,0" Grid.Row="2" Style="{StaticResource SubtitleTextBlockStyle}">Related Controls</TextBlock>
                
                <ItemsControl
                    x:Name="RelatedItemsControl"
                    Margin="0,12,0,0"
                    IsTabStop="False"
                    Grid.Row="3">

                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <toolkit:WrapPanel Orientation="Horizontal" HorizontalSpacing="32" VerticalSpacing="6"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>

                    <ItemsControl.ItemTemplate>
                        <DataTemplate x:DataType="datamodel:ControlInfoDataItem">
                            <!-- A HyperlinkButton must always provide an accessible name to a screen reader which
                                         conveys the purpose of the link. By default, when the HyperlinkButton is built
                                         as below, with an Image and TextBlock, the HyperlinkButton provides no accessible
                                         name. So bind the accessible name to the same data that provides the text shown
                                         visually on the contained TextBlock. -->
                            <HyperlinkButton AutomationProperties.Name="{x:Bind Title}" DataContext="{x:Bind local:ProtocolActivationClipboardHelper.GetUri(Self)}" Click="HyperlinkButton_Click">
                                <RelativePanel>
                                    <!-- Now that the HyperlinkButton has a helpful accessible name, it serves no
                                        useful purpose for the contained Image, (which is purely decorative,) or
                                        the contained TextBlock to be exposed to a screen reader. All the information
                                        required by customers using a screen reader is accessible directly through the
                                        Hyperlink button. As such, mark the contained elements as not being interesting
                                        to a screen reader through use of the AutomationProperties.AccessibilityView
                                        property. -->
                                    <FontIcon
                                                AutomationProperties.AccessibilityView="Raw"
                                                x:Name="iconImage"
                                                Margin="0,0,15,0"
                                                FontFamily="{StaticResource SymbolThemeFontFamily}"
                                                Glyph="{x:Bind IconGlyph}"/>
                                    <TextBlock
                                                AutomationProperties.AccessibilityView="Raw"
                                                RelativePanel.RightOf="iconImage"
                                                Text="{x:Bind Title}"
                                                TextWrapping="Wrap" />
                                </RelativePanel>
                            </HyperlinkButton>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </Grid>
        </ScrollViewer>

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="NormalFrameContent" />
                <VisualState x:Name="WideFrameContent">
                    <VisualState.Setters>
                        <Setter Target="contentFrame.Width" Value="1028" />
                        <Setter Target="contentFrame.HorizontalAlignment" Value="Left" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
            <VisualStateGroup x:Name="LayoutVisualStates">
                <VisualState x:Name="WideLayout">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource Breakpoint640Plus}" />
                    </VisualState.StateTriggers>
                </VisualState>
                <VisualState x:Name="NarrowLayout">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="pageHeader.Margin" Value="16,12,16,0" />
                        <Setter Target="contentRoot.Padding" Value="16,0,16,16" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
</Page>
