<Page
    x:Class="UWPGallery.ControlPages.InkCanvasPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:UWPGallery.ControlPages"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"
    xmlns:controls="using:UWPGallery.Controls"
    xmlns:ink="using:Windows.UI.Input.Inking">

    <StackPanel Spacing="6">
        <controls:GallerySample HeaderTitle="Simple InkCanvas" MinHeight="400">
            <controls:GallerySample.Sample>
                <Grid RowSpacing="6">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    
                    <TextBlock TextWrapping="WrapWholeWords">InkCanvas only allows pen input by default. To allow mouse and other types of input, you need to configure the input device types of the underlying InkPresenter. See the C# source code (by clicking the Source button) to see how to do this.</TextBlock>

                    <Border Background="White" Grid.Row="1">
                        <InkCanvas x:Name="InkCanvasSample1"/>
                    </Border>

                </Grid>
            </controls:GallerySample.Sample>

            <controls:GallerySample.XamlSource>
                <x:String xml:space="preserve">
&lt;Grid RowSpacing="6"&gt;
    &lt;Grid.RowDefinitions&gt;
        &lt;RowDefinition Height="Auto"/&gt;
        &lt;RowDefinition Height="*"/&gt;
    &lt;/Grid.RowDefinitions&gt;
                    
    &lt;TextBlock TextWrapping="WrapWholeWords"&gt;InkCanvas only allows pen input by default. To allow mouse and other types of input, you need to configure the input device types of the underlying InkPresenter. See the C# source code (by clicking the Source button) to see how to do this.&lt;/TextBlock&gt;

    &lt;Border Background="White" Grid.Row="1"&gt;
        &lt;InkCanvas x:Name="InkCanvasSample1"/&gt;
    &lt;/Grid&gt;
&lt;/Grid&gt;
                </x:String>
            </controls:GallerySample.XamlSource>
            
            <controls:GallerySample.CSharpSource>
                <x:String xml:space="preserve">
public InkCanvasPage()
{
    InitializeComponent();

    InkCanvasSample1.InkPresenter.InputDeviceTypes = CoreInputDeviceTypes.Touch | CoreInputDeviceTypes.Pen | CoreInputDeviceTypes.Mouse;
}
                </x:String>
            </controls:GallerySample.CSharpSource>
        </controls:GallerySample>

        <controls:GallerySample HeaderTitle="Ink recognition" MinHeight="400">
            <controls:GallerySample.Sample>
                <Grid RowSpacing="6">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    
                    <Border Background="White">
                        <Grid>
                            <InkCanvas x:Name="InkCanvasRecognitionSample"/>
                            <Canvas x:Name="RecognitionCanvas"/>
                        </Grid>
                    </Border>
                    
                    <Button Grid.Row="1" x:Name="RecognizeButton" Content="Recognize" Click="RecognizeButton_Click"/>
                </Grid>
            </controls:GallerySample.Sample>

            <controls:GallerySample.XamlSource>
                <x:String xml:space="preserve">
&lt;Grid RowSpacing="6"&gt;
    &lt;Grid.RowDefinitions&gt;
        &lt;RowDefinition Height="*"/&gt;
        &lt;RowDefinition Height="Auto"/&gt;
    &lt;/Grid.RowDefinitions&gt;
                    
    &lt;Border Background="White"&gt;
        &lt;Grid&gt;
            &lt;InkCanvas x:Name="InkCanvasRecognitionSample"/&gt;
            &lt;Canvas x:Name="RecognitionCanvas"/&gt;
        &lt;/Grid&gt;
    &lt;/Border&gt;
                    
    &lt;Button Grid.Row="1" x:Name="RecognizeButton" Content="Recognize" Click="RecognizeButton_Click"/&gt;
&lt;/Grid&gt;
                </x:String>
            </controls:GallerySample.XamlSource>

            <controls:GallerySample.CSharpSource>
                <x:String xml:space="preserve">
private async void RecognizeButton_Click(object sender, RoutedEventArgs e)
{
    inkStrokes = InkCanvasRecognitionSample.InkPresenter.StrokeContainer.GetStrokes();
    // Ensure an ink stroke is present.
    if (inkStrokes.Count > 0)
    {
        inkAnalyzer.AddDataForStrokes(inkStrokes);

        // In this example, we try to recognizing both 
        // writing and drawing, so the platform default 
        // of "InkAnalysisStrokeKind.Auto" is used.
        // If you're only interested in a specific type of recognition,
        // such as writing or drawing, you can constrain recognition 
        // using the SetStrokDataKind method as follows:
        // foreach (var stroke in strokesText)
        // {
        //     analyzerText.SetStrokeDataKind(
        //      stroke.Id, InkAnalysisStrokeKind.Writing);
        // }
        // This can improve both efficiency and recognition results.
        inkAnalysisResults = await inkAnalyzer.AnalyzeAsync().AsTask();

        // Have ink strokes on the canvas changed?
        if (inkAnalysisResults.Status == InkAnalysisStatus.Updated)
        {
            // Find all strokes that are recognized as handwriting and 
            // create a corresponding ink analysis InkWord node.
            var inkwordNodes =
                inkAnalyzer.AnalysisRoot.FindNodes(
                    InkAnalysisNodeKind.InkWord);

            // Iterate through each InkWord node.
            // Draw primary recognized text on recognitionCanvas 
            // (for this example, we ignore alternatives), and delete 
            // ink analysis data and recognized strokes.
            foreach (InkAnalysisInkWord node in inkwordNodes)
            {
                // Draw a TextBlock object on the recognitionCanvas.
                DrawText(node.RecognizedText, node.BoundingRect);

                foreach (var strokeId in node.GetStrokeIds())
                {
                    var stroke =
                        InkCanvasRecognitionSample.InkPresenter.StrokeContainer.GetStrokeById(strokeId);
                    stroke.Selected = true;
                }
                inkAnalyzer.RemoveDataForStrokes(node.GetStrokeIds());
            }
            InkCanvasRecognitionSample.InkPresenter.StrokeContainer.DeleteSelected();

            // Find all strokes that are recognized as a drawing and 
            // create a corresponding ink analysis InkDrawing node.
            var inkdrawingNodes =
                inkAnalyzer.AnalysisRoot.FindNodes(
                    InkAnalysisNodeKind.InkDrawing);
            // Iterate through each InkDrawing node.
            // Draw recognized shapes on recognitionCanvas and
            // delete ink analysis data and recognized strokes.
            foreach (InkAnalysisInkDrawing node in inkdrawingNodes)
            {
                if (node.DrawingKind == InkAnalysisDrawingKind.Drawing)
                {
                    // Catch and process unsupported shapes (lines and so on) here.
                }
                // Process generalized shapes here (ellipses and polygons).
                else
                {
                    // Draw an Ellipse object on the recognition Canvas (circle is a specialized ellipse).
                    if (node.DrawingKind == InkAnalysisDrawingKind.Circle || node.DrawingKind == InkAnalysisDrawingKind.Ellipse)
                    {
                        DrawEllipse(node);
                    }
                    // Draw a Polygon object on the recognition Canvas.
                    else
                    {
                        DrawPolygon(node);
                    }
                    foreach (var strokeId in node.GetStrokeIds())
                    {
                        var stroke = InkCanvasRecognitionSample.InkPresenter.StrokeContainer.GetStrokeById(strokeId);
                        stroke.Selected = true;
                    }
                }
                inkAnalyzer.RemoveDataForStrokes(node.GetStrokeIds());
            }
            InkCanvasRecognitionSample.InkPresenter.StrokeContainer.DeleteSelected();

            if (!inkwordNodes.Any() &amp;&amp; !inkdrawingNodes.Any())
            {
                _ = new ContentDialog
                {
                    Title = "Ink analysis nodes not found",
                    Content = "The ink analysis nodes were not found, meaning none of your strokes were recognized as text or drawings. Please try again.",
                    CloseButtonText = "OK",
                    DefaultButton = ContentDialogButton.Close
                }.ShowAsync();
            }
        }
        else
        {
            _ = new ContentDialog
            {
                Title = "The ink analysis status was not updated",
                Content = "The ink analysis status was not updated, which means that some error may've occured." +
                $" The current status is: {inkAnalysisResults.Status}",
                CloseButtonText = "OK",
                DefaultButton = ContentDialogButton.Close
            }.ShowAsync();
        }
    }
}

private void DrawText(string recognizedText, Rect boundingRect)
{
    TextBlock text = new TextBlock();
    Canvas.SetTop(text, boundingRect.Top);
    Canvas.SetLeft(text, boundingRect.Left);

    text.Text = recognizedText;
    text.FontSize = boundingRect.Height;
    text.Foreground = new SolidColorBrush(Color.FromArgb(255, 0, 0, 0));

    RecognitionCanvas.Children.Add(text);
}

private void DrawEllipse(InkAnalysisInkDrawing shape)
{
    var points = shape.Points;
    Ellipse ellipse = new Ellipse();

    ellipse.Width = shape.BoundingRect.Width;
    ellipse.Height = shape.BoundingRect.Height;

    Canvas.SetTop(ellipse, shape.BoundingRect.Top);
    Canvas.SetLeft(ellipse, shape.BoundingRect.Left);

    var brush = new SolidColorBrush(ColorHelper.FromArgb(255, 0, 0, 255));
    ellipse.Stroke = brush;
    ellipse.StrokeThickness = 2;
    RecognitionCanvas.Children.Add(ellipse);
}

// Draw a polygon on the recognitionCanvas.
private void DrawPolygon(InkAnalysisInkDrawing shape)
{
    List&lt;Point&gt; points = new List&lt;Point&gt;(shape.Points);
    Polygon polygon = new Polygon();

    foreach (Point point in points)
    {
        polygon.Points.Add(point);
    }

    var brush = new SolidColorBrush(ColorHelper.FromArgb(255, 0, 0, 255));
    polygon.Stroke = brush;
    polygon.StrokeThickness = 2;
    RecognitionCanvas.Children.Add(polygon);
}
                </x:String>
            </controls:GallerySample.CSharpSource>
        </controls:GallerySample>

        <controls:GallerySample HeaderTitle="International Text Recognition" MinHeight="520">
            <controls:GallerySample.Sample>
                <Grid ColumnSpacing="6">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="500"/>
                    </Grid.ColumnDefinitions>
                    
                    <Border Background="White">
                        <Grid>
                            <InkCanvas x:Name="InternationalRecognitionInkCanvasSample"/>
                            <Canvas x:Name="InternationalRecognitionOverlayCanvas"/>
                        </Grid>
                    </Border>

                    <StackPanel Spacing="6" Grid.Column="1">
                        <TextBlock Text="Choose a recognizer:"/>
                        <StackPanel Orientation="Horizontal" Spacing="6">
                            <ComboBox x:Name="RecognizerComboBox" SelectionChanged="RecognizerComboBox_SelectionChanged">
                                <ComboBox.ItemTemplate>
                                    <DataTemplate x:DataType="ink:InkRecognizer">
                                        <TextBlock Text="{x:Bind Name}" ToolTipService.ToolTip="{x:Bind Name}" TextTrimming="CharacterEllipsis" />
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                        </StackPanel>

                        <StackPanel Orientation="Horizontal" Spacing="6">
                            <HyperlinkButton NavigateUri="ms-settings-language:///" Content="Add a recognizer"/>
                            <HyperlinkButton Content="Refresh Recognizers" x:Name="RefreshRecognizersLink" Click="RefreshRecognizersLink_Click"/>
                        </StackPanel>

                        <TextBlock TextWrapping="WrapWholeWords">
                            <TextBlock.Inlines>
                                <Run>
                                    <x:String xml:space="preserve">
To add a recognizer:
1. Go to Windows Settings -> Time and Language -> Region and Language, or click the Add a recognizer link above.
2. If the language is already installed, you can skip to step 5. Otherwise, continue.
3. Click Add a language and pick the language to add. The languages with the handwriting icon have handwriting recognizers. Finally, press Next.
4. Wait for the language pack to install.
5. On the language you want to install a recognizer for, press the ... button and select Language Options.
6. Click the Install button next to the handwriting recognition engine and wait for the recognizer to install.
7. Finally, press Refresh Recognizers back in the UWP Gallery app.
                                    </x:String>
                                </Run>
                            </TextBlock.Inlines>
                        </TextBlock>

                        <ToggleSwitch OffContent="Draw on canvas" OnContent="Show results in dialog" x:Name="InternationalRecognitionModeToggleSwitch"/>

                        <Button x:Name="InternationalRecognitionRecognizeButton" Content="Recognize text" Click="InternationalRecognitionRecognizeButton_Click"
                                IsEnabled="False"/>
                    </StackPanel>
                </Grid>
            </controls:GallerySample.Sample>

            <controls:GallerySample.XamlSource>
                <x:String xml:space="preserve">
&lt;Grid ColumnSpacing="6"&gt;
    &lt;Grid.ColumnDefinitions&gt;
        &lt;ColumnDefinition Width="*"/&gt;
        &lt;ColumnDefinition Width="500"/&gt;
    &lt;/Grid.ColumnDefinitions&gt;
                    
    &lt;Border Background="White"&gt;
        &lt;Grid&gt;
            &lt;InkCanvas x:Name="InternationalRecognitionInkCanvasSample"/&gt;
            &lt;Canvas x:Name="InternationalRecognitionOverlayCanvas"/&gt;
        &lt;/Grid&gt;
    &lt;/Border&gt;

    &lt;StackPanel Spacing="6" Grid.Column="1"&gt;
        &lt;TextBlock Text="Choose a recognizer:"/&gt;
        &lt;StackPanel Orientation="Horizontal" Spacing="6"&gt;
            &lt;ComboBox x:Name="RecognizerComboBox" SelectionChanged="RecognizerComboBox_SelectionChanged"&gt;
                &lt;ComboBox.ItemTemplate&gt;
                    &lt;DataTemplate x:DataType="ink:InkRecognizer"&gt;
                        &lt;TextBlock Text="{x:Bind Name}" ToolTipService.ToolTip="{x:Bind Name}" TextTrimming="CharacterEllipsis" /&gt;
                    &lt;/DataTemplate&gt;
                &lt;/ComboBox.ItemTemplate&gt;
            &lt;/ComboBox&gt;
        &lt;/StackPanel&gt;

        &lt;StackPanel Orientation="Horizontal" Spacing="6"&gt;
            &lt;HyperlinkButton NavigateUri="ms-settings-language:///" Content="Add a recognizer"/&gt;
            &lt;HyperlinkButton Content="Refresh Recognizers" x:Name="RefreshRecognizersLink" Click="RefreshRecognizersLink_Click"/&gt;
        &lt;/StackPanel&gt;

        &lt;TextBlock TextWrapping="WrapWholeWords"&gt;
            &lt;TextBlock.Inlines&gt;
                &lt;Run&gt;
                    &lt;x:String xml:space="preserve"&gt;
To add a recognizer:
1. Go to Windows Settings -&gt; Time and Language -&gt; Region and Language, or click the Add a recognizer link above.
2. If the language is already installed, you can skip to step 5. Otherwise, continue.
3. Click Add a language and pick the language to add. The languages with the handwriting icon have handwriting recognizers. Finally, press Next.
4. Wait for the language pack to install.
5. On the language you want to install a recognizer for, press the ... button and select Language Options.
6. Click the Install button next to the handwriting recognition engine and wait for the recognizer to install.
7. Finally, press Refresh Recognizers back in the UWP Gallery app.
                    &lt;/x:String&gt;
                &lt;/Run&gt;
            &lt;/TextBlock.Inlines&gt;
        &lt;/TextBlock&gt;

        &lt;ToggleSwitch OffContent="Draw on canvas" OnContent="Show results in dialog" x:Name="InternationalRecognitionModeToggleSwitch"/&gt;

        &lt;Button x:Name="InternationalRecognitionRecognizeButton" Content="Recognize text" Click="InternationalRecognitionRecognizeButton_Click"
                IsEnabled="False"/&gt;
    &lt;/StackPanel&gt;
&lt;/Grid&gt;
                </x:String>
            </controls:GallerySample.XamlSource>

            <controls:GallerySample.CSharpSource>
                <x:String xml:space="preserve">
private void DrawText(string recognizedText, Rect boundingRect, Canvas canvas)
{
    TextBlock text = new TextBlock();
    Canvas.SetTop(text, boundingRect.Top);
    Canvas.SetLeft(text, boundingRect.Left);

    text.Text = recognizedText;
    text.FontSize = boundingRect.Height;
    text.Foreground = new SolidColorBrush(Color.FromArgb(255, 0, 0, 0));

    canvas.Children.Add(text);
}
                
private void RefreshRecognizersLink_Click(object sender, RoutedEventArgs e)
{
    inkRecognizerContainer = new InkRecognizerContainer();
    // Retrieve the collection of installed handwriting recognizers.
    IReadOnlyList&lt;InkRecognizer&gt; installedRecognizers =
        inkRecognizerContainer.GetRecognizers();
    // inkRecognizerContainer is null if a recognition engine is not available.
    if (!(inkRecognizerContainer == null))
    {
        RecognizerComboBox.ItemsSource = installedRecognizers.ToList();
    }
}

private async void InternationalRecognitionRecognizeButton_Click(object sender, RoutedEventArgs e)
{
    // Get all strokes on the InkCanvas.
    IReadOnlyList&lt;InkStroke&gt; currentStrokes =
        InternationalRecognitionInkCanvasSample.InkPresenter.StrokeContainer.GetStrokes();

    if (!currentStrokes.Any())
    {
        _ = new ContentDialog
        {
            Title = "No ink strokes",
            Content = "Please draw ink strokes on the canvas before trying to recognize.",
            CloseButtonText = "Close",
            DefaultButton = ContentDialogButton.Close
        }.ShowAsync();

        return;
    }

    try
    {
        // Recognize all ink strokes on the ink canvas.
        IReadOnlyList&lt;InkRecognitionResult&gt; recognitionResults =
            await inkRecognizerContainer?.RecognizeAsync(
                InternationalRecognitionInkCanvasSample.InkPresenter.StrokeContainer,
                InkRecognitionTarget.All);

        string str = string.Empty;
        int c = 0;
        // Iterate through the recognition results.
        foreach (InkRecognitionResult result in recognitionResults)
        {
            // Get all recognition candidates from each recognition result.
            IReadOnlyList&lt;string&gt; candidates =
                result.GetTextCandidates();
            c += candidates.Count;
            foreach (string candidate in candidates)
            {
                str += candidate + "\n";
            }

            if (!InternationalRecognitionModeToggleSwitch.IsOn)
                if (candidates.Any())
                    DrawText(candidates[0], result.BoundingRect, InternationalRecognitionOverlayCanvas);
        }
        // Display the recognition candidates.

        if (InternationalRecognitionModeToggleSwitch.IsOn)
        {
            var dlg = new ContentDialog
            {
                Content = str,
                Title = "Ink Recognition Results: " + c,
                CloseButtonText = "OK",
                DefaultButton = ContentDialogButton.Close
            };
            _ = dlg.ShowAsync();
        }

        // Clear the ink canvas once recognition is complete.
        InternationalRecognitionInkCanvasSample.InkPresenter.StrokeContainer.Clear();
    }
    catch (Exception ex)
    {
        var btn = await new ContentDialog
        {
            Title = "An error occured",
            Content = "An exception occured recognizing the ink strokes.\n" +
            $"Type: {ex.GetType().FullName ?? ex.GetType().Name}\n" +
            $"HRESULT: {ex.HResult}\n" +
            $"Message: \"{ex.Message}\"\n\n" +
            "Would you like to clear the ink canvas?",
            PrimaryButtonText = "Clear canvas",
            SecondaryButtonText = "No",
            DefaultButton = ContentDialogButton.Primary
        }.ShowAsync();

        if (btn == ContentDialogResult.Primary)
        {
            InternationalRecognitionInkCanvasSample.InkPresenter.StrokeContainer.Clear();
        }
    }
}

private void RecognizerComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
{
    inkRecognizerContainer?.SetDefaultRecognizer(RecognizerComboBox.SelectedItem as InkRecognizer);
    InternationalRecognitionRecognizeButton.IsEnabled = true;
}
                </x:String>
            </controls:GallerySample.CSharpSource>
        </controls:GallerySample>

        <controls:GallerySample HeaderTitle="InkCanvas with InkToolbar" MinHeight="500">
            <Grid RowSpacing="6">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                
                <TextBlock TextWrapping="WrapWholeWords">InkToolbar is the recommended control to use if you want to allow the user to customize the inking behavior.
                For more info, see <Hyperlink Click="Hyperlink_Click">InkToolbar</Hyperlink>.</TextBlock>
                
                <InkToolbar TargetInkCanvas="{x:Bind InkToolbarCanvas}" Grid.Row="1" HorizontalAlignment="Center"/>
                <Border Background="White" Grid.Row="2">
                    <InkCanvas x:Name="InkToolbarCanvas"/>
                </Border>
            </Grid>
        </controls:GallerySample>
    </StackPanel>
</Page>
